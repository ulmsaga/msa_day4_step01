pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/ulmsaga/msa_day4_step01.git'
        GIT_BRANCH = 'main'
        GIT_CREDENTIAL_ID = 'sclee1115'
        DOCKER_REGISTRY = 'k8s-vga-worker1:5000'
        PREFIX = 'group1-team3'
        APP = 'team3-lsc-configserver'
        JAVA_HOME = "/jdk-21.0.5"
        PATH = "${JAVA_HOME}/bin:${PATH}"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${GIT_BRANCH}", url: "${GIT_REPO}"
            }
        }
        
        stage('Check Java Version') {
            steps {
                dir('configserver') {
                    sh 'echo "Using Java from: $JAVA_HOME"'
                    sh 'java -version'
                }
            }
        }

        stage('Extract Version') {
            steps {
                script {
                    // Extract version from pom.xml
                    VERSION = sh(
                        script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout",
                        returnStdout: true
                    ).trim()
                    echo "Extracted version: ${VERSION}"
                }
            }
        }

        stage('Build with Maven') {
            steps {
                dir('configserver') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('@jenkins/dockerfiles') {
                    // docker.build("${DOCKER_REGISTRY}/${PREFIX}-${APP}:v${VERSION}", "--platform=linux/amd64 .")
                    // docker.build("${DOCKER_REGISTRY}/${PREFIX}-${APP}:v${VERSION}")
                    sh "docker build -t ${DOCKER_REGISTRY}/${PREFIX}-${APP}:v${VERSION} -f configserver.Dockerfile ../../"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry("http://${DOCKER_REGISTRY}") {
                        docker.image("${DOCKER_REGISTRY}/${PREFIX}-${APP}:v${VERSION}").push()
                    }
                }
            }
        }

        stage('Deploy and Service to Kubernetes') {
            steps {
                dir('@jenkins/k8s') {
                    // 이전 배포 방식
                    // sh "kubectl apply -f ./configserver.yaml -n ${NAMESPACE}"
                    
                    // 새로운 배포 방식 - 버전 동적 처리
                    sh """
                        sed 's/:_IMAGE_TAG_/:v${VERSION}/g' configserver.template.yaml > configserver.yaml
                        kubectl apply -f configserver.yaml -n ${NAMESPACE}
                        # rm configserver.yaml
                    """
                }
            }
        }

        stage('Deployment Image Update') {
            steps {
                sh "kubectl set image deployment/${APP}-deployment ${APP}-container=${DOCKER_REGISTRY}/${PREFIX}-${APP}:v${VERSION} --namespace=${NAMESPACE}"
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}